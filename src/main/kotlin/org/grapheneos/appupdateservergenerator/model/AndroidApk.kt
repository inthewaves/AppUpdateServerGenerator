package org.grapheneos.appupdateservergenerator.model

import org.grapheneos.appupdateservergenerator.apkparsing.AAPT2Invoker
import org.grapheneos.appupdateservergenerator.apkparsing.ApkSignerInvoker
import java.io.File
import java.io.IOException

/**
 * Encapsulates data from the [apkFile] that was taken from the [apkFile]'s manifest and signing
 * certificate info.
 */
data class AndroidApk(
    val apkFile: File,
    val label: String,
    val packageName: String,
    val versionCode: VersionCode,
    val versionName: String,
    val minSdkVersion: Int,
    val certificates: List<HexString>
) {
    class Builder {
        var apkFile: File? = null
        var label: String? = null
        var packageName: String? = null
        var versionCode: VersionCode? = null
        var versionName: String? = null
        var minSdkVersion: Int? = null
        var certificates: List<HexString>? = null

        private val isBuildable: Boolean
            get() = apkFile != null &&
                    label != null &&
                    packageName != null &&
                    versionCode != null &&
                    versionName != null &&
                    minSdkVersion != null &&
                    certificates != null

        fun buildIfAllPresent(): AndroidApk? {
            return if (isBuildable) {
                AndroidApk(
                    apkFile = apkFile!!,
                    label = label!!,
                    packageName = packageName!!,
                    versionCode = versionCode!!,
                    versionName = versionName!!,
                    minSdkVersion = minSdkVersion!!,
                    certificates = certificates!!
                )
            } else {
                null
            }
        }

        /** Generated by IDEA */
        override fun toString(): String {
            return "Builder(apkFile=$apkFile, label=$label, packageName=$packageName, versionCode=$versionCode, " +
                    "versionName=$versionName, minSdkVersion=$minSdkVersion, certificates=$certificates)"
        }

    }

    companion object {
        /**
         * Builds an [AndroidApk] instance from the given [apkFile]. The [apkFile] will be stored as a member variable
         * in [AndroidApk.apkFile]. `apksigner verify` will be invoked on the APK to verify the signature of the APK.
         *
         * @throws IOException if an I/O error occurs, or the APK can't be parsed by the [aaptInvoker], or the APK
         * failed to verify with the [apkSignerInvoker]
         */
        fun verifyApkSignatureAndBuildFromApkFile(
            apkFile: File,
            aaptInvoker: AAPT2Invoker,
            apkSignerInvoker: ApkSignerInvoker
        ): AndroidApk {
            val builder = Builder()
            builder.apkFile = apkFile
            aaptInvoker.getAndroidAppDetails(apkFile, builder)
            builder.certificates = apkSignerInvoker.verifyAndGetSigningCerts(apkFile)
            return builder.buildIfAllPresent() ?: throw IOException("failed to build: $builder")
        }
    }
}
