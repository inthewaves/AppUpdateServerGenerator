package org.grapheneos.appupdateservergenerator.model

import org.grapheneos.appupdateservergenerator.util.invoker.AAPT2Invoker
import org.grapheneos.appupdateservergenerator.util.invoker.ApkSignerInvoker
import java.io.File
import java.io.IOException

data class AndroidApk(
    val apkFile: File,
    val packageName: String,
    val versionCode: VersionCode,
    val versionName: String,
    val minSdkVersion: Int,
    val certificates: List<HexString>
) {
    class Builder {
        var apkFile: File? = null
        var packageName: String? = null
        var versionCode: VersionCode? = null
        var versionName: String? = null
        var minSdkVersion: Int? = null
        var certificates: List<HexString>? = null

        fun buildIfAllPresent(): AndroidApk? {
            return if (apkFile != null &&
                packageName != null &&
                versionCode != null &&
                versionName != null &&
                minSdkVersion != null &&
                certificates != null
            ) {
                AndroidApk(apkFile!!, packageName!!, versionCode!!, versionName!!, minSdkVersion!!, certificates!!)
            } else {
                null
            }
        }

        /**
         * Generated by IDEA
         */
        override fun toString(): String {
            return "Builder(apkFile=$apkFile, packageName=$packageName, versionCode=$versionCode, versionName=$versionName, minSdkVersion=$minSdkVersion, certificates=$certificates)"
        }
    }

    companion object {
        @Throws(IOException::class)
        fun buildFromApkFile(apkFile: File, aaptInvoker: AAPT2Invoker, apkSignerInvoker: ApkSignerInvoker): AndroidApk {
            val builder = Builder()
            builder.apkFile = apkFile
            aaptInvoker.getAndroidAppDetails(apkFile, builder)
            builder.certificates = apkSignerInvoker.verifyAndGetSigningCerts(apkFile)
            return builder.buildIfAllPresent() ?: error("failed to build: $builder")
        }
    }
}
