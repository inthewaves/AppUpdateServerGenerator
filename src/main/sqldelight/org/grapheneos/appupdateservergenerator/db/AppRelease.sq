-- Version 1 schema:
--
-- CREATE TABLE AppRelease (
--     packageName TEXT AS PackageName NOT NULL REFERENCES App(packageName) ON DELETE CASCADE,
--     versionCode INTEGER AS VersionCode NOT NULL,
--     versionName TEXT NOT NULL,
--     minSdkVersion INTEGER AS Int NOT NULL,
--     /** The [UnixTimestamp] of the release. Note: This can change if the release notes are edited, for example. */
--     releaseTimestamp INTEGER AS UnixTimestamp NOT NULL,
--     /** A sha256 checksum of the APK. This should be checked by clients. */
--     apkSha256 TEXT AS Base64String NOT NULL,
--     /** A sha256 checksum of the APK Signature Scheme v4 signature. If this is null, the APK wasn't
-- signed using the v4 scheme; otherwise, clients should expect to find the `.apk.idsig` file next to the APK. */
--     v4SigSha256 TEXT AS Base64String,
--     /** Optional release notes for this release. This can be in Markdown (flavor configured in
-- [org.grapheneos.appupdateservergenerator.api.MarkdownProcessor]) or HTML. Contents will be compressed
-- during metadata generation, but contents in the database are left as is. */
--     releaseNotes TEXT,
--     PRIMARY KEY(packageName, versionCode)
-- );
-- CREATE INDEX AppRelease_covering ON AppRelease(
--     packageName, versionCode, versionName, minSdkVersion, releaseTimestamp, apkSha256, releaseNotes
-- );

selectAllByApp:
SELECT *
FROM AppRelease
WHERE packageName = ?
ORDER BY versionCode DESC;

selectLatestRelease:
SELECT *
FROM AppRelease
WHERE packageName = ?
ORDER BY versionCode DESC
LIMIT 1;

updateReleaseNotes:
UPDATE AppRelease SET releaseNotes = ?, releaseTimestamp = ? WHERE packageName = ? AND versionCode = ?;

selectByAppAndVersion:
SELECT * FROM AppRelease WHERE packageName = ? AND versionCode = ?;

insert:
INSERT INTO AppRelease VALUES ?;